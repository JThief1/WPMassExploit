#!/usr/bin/python3


# Example ./WPUserDetect.py -d DomainList.txt -o GoodList -t Threads NUM

import requests
import re
import time
import argparse
from multiprocessing.dummy import Pool


class UserDetectWP(object):

    def __init__(self, domainList, goodFileName, threads):
        self.domainList = domainList
        self.goodFileName = goodFileName
        self.threads = threads

    def buildSitesList(self):
        f = open(self.domainList).readlines()
        sitesList = []
        for domain in f:
            sitesList.append(domain.rstrip())
        print('Total domains: ' + str(len(sitesList)))
        time.sleep(5)
        return list(set(sitesList))

    def writeResult(self, domain, user):
        print('Good Domain: ' + domain)
        f = open(self.goodFileName, 'a')
        f.write(domain + ';' + user + '\n')
        f.close()

    def getResponse(self, domain):
        print('Try domain: ' + domain)
        try:
            result = requests.get(domain + '/wp-json/wp/v2/users/', timeout=3)
            self.checkUser(result, domain)
            self.domainList.remove(domain)
        except Exception:
            return False

    def checkUser(self, htmCode, domain):
        templateUser = re.compile(r'\[{"id":1,"name":"(.*?)"')
        try:
            foundUser = templateUser.findall(htmCode.text)
            formatUser = ''.join(foundUser)
            if htmCode.status_code in [200] and foundUser != []:
                self.writeResult(domain, formatUser)
            else:
                pass
        except Exception:
            return False

    def mainRun(self):
        self.domainList = self.buildSitesList()
        pool = Pool(self.threads)
        pool.map(self.getResponse, self.domainList)
        pool.close()
        pool.join()

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", help="Domain list", type=str)
    parser.add_argument("-o", help="Out file", type=str)
    parser.add_argument("-t", help="Threads", type=int)
    args = parser.parse_args()

    try:
        userDetect = UserDetectWP(args.d, args.o, args.t)
        userDetect.mainRun()
    except KeyboardInterrupt:
        exit('\nExit')
    except RuntimeError:
        exit('\n(ERROR!): Too many threads for your system')

